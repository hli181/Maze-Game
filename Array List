import java.util.Arrays;
public class ArrayList<T extends Comparable<T>> implements List<T> {

    private boolean isSorted = true;
    private T[] list;   //array of list entries
    private int size =0; // the numbers of entries
    private static final int default_capacity = 2;


    //constructor
    public ArrayList(){

        list = (T[]) new Comparable[2];
    }


    @Override
    public boolean add(T element) {
        if(element == null) {
            return false;
        }
        else{
            isSorted = false;
            list[size] = element;
            size++;
            growing();

            return true;
        }
    }

    @Override
    public boolean add(int index, T element) {
        if(index<0 || index >= size() || element ==null){
            return false;
        }

        if(index>=0 && index <= size +1){
            makeroom(index);
            list[index] = element;
            size++;
            if(size == list.length) {
                growing();
            }
        }
        return true;
    }
    public static int highCount(int[][] a){
        int count =0;
        for(int i =0; i < a.length; i++){
            for(int j =0; j<a[i].length;j++){
                if(a[i][j] == selectvalue;
                count++
            }

        }
        return count;
    }
    @Override
    public void clear() {
        size =0;
        ArrayList list = new ArrayList();
    }

    @Override
    public boolean contains(T element) {
        for(int i =0; i <size(); i++){
            if(list[i].equals(element)){
                return true;
            }
        }
        return false;
    }

    @Override
    public T get(int index) {
        if(index<0 || index >= size()){
            return null;
        }
        else{
            return list[index];
        }
    }

    @Override
    public int indexOf(T element) {
        if(element ==null ||contains(element) == false){
            return -1;
        }
        else{
            for(int i =0; i <size(); i++){
                if(list[i].equals(element)){
                    return i;
                }
            }
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        if(size ==0){
            return true;
        }
        return false;
    }

    @Override
    public int lastIndexOf(T element) {
        int temp =0;
        int index = 0;
        if(element ==null ||contains(element) == false){
            return -1;
        }
        else{
            while(index < size()){
                if(list[index].equals(element)){
                    temp = index;
                }
                index++;
            }
        }
        return temp;
    }

    @Override
    public T set(int index, T element) {
        T temp = null;
        if(element ==null || index<0||index >=size()){
            return null;
        }
        else{
            temp = list[index];
            list[index] = element;
        }
        return temp;
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public void sort(boolean order) {
        T temp = null;
        if (order == true) {  //increasing order
            for(int i =0; i < size(); i++){
                for(int j =0; j< size(); j++){
                    if(list[i].compareTo(list[j])<0 &&i!=j){
                        temp = list[i];
                        list[i] = list[j];
                        list[j] = temp;
                    }
                }
            }
        }
        else{
            for(int i =0; i < size(); i++){
                for(int j =0; j< size(); j++){
                    if(list[i].compareTo(list[j]) > 0 && i!=j){
                        temp = list[i];
                        list[i] = list[j];
                        list[j] = temp;
                    }
                }
            }
        }
    }

    @Override
    public boolean remove(T element) {
        if(contains(element) == false){
            return false;
        }
        else{
            for(int i =0; i < size(); i++){
                if(list[i].equals(element)){
                    removegap(i);
                    return true;
                }
            }
            return true;
        }
    }

    private void removegap(int givenindex) {
        int lastindex = size;
        int removedindex = givenindex;
        for(int index = removedindex; index< lastindex; index++){
            list[index] = list[index+1];
        }
    }

    @Override
    public T remove(int index) {
        if(index<0 || index>=size()){
            return null;
        }
        if(index < size()){
            T result = list[index];
            removegap(index);
            size--;
            return result;
        }
     return null;
    }

    public void growing(){
        int capacity = list.length - 1;
        if(size >= capacity){
            int newcapacity = 2 * capacity;
            list = Arrays.copyOf(list, newcapacity + 1);
        }
    }

    private void makeroom(int index) {
        int newindex = index;
        int lastindex = size;
        for(int i = lastindex - 1; i >= newindex; i--){
            list[i + 1] = list[i];
        }
    }

    public String toString(){
        String result = " ";
        for(int index = 0; index <size; index++){
            result = result + list[index] + " ";
        }
        return result;
    }
}
